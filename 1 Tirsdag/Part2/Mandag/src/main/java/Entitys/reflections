Relational Mapping:
unidirectional @OneToMany association, it means you can only access the relationship from the parent side where the foreign key resides.
bidirectional @OneToMany association, you can navigate the association in both ways, either from the parent or from the child side

1. One to One – Unidirectiona
    understand (100% exam relevant) how an OO-language implements OneToOne relations and how a relational database does the same:
    
    Language: by placing an unidirectional @one to one at address. Java knows that the entitys is conneted    
    Database: Database uses a foreign key placed in the owner table 

2.  One to One – Bidirectional
    
3) OneToMany (unidirectional)
    How many tables were generated? Explain the purpose of each of the tables 
    Number of tables = 3 ADDRESS = adress entity, CUSTOMER = Customer entity , CUSTOMER_ADDRESS = Join Table


Nået her til 3 
If you (as us) don't like the number of generated tables generated by this strategy, you can use the @JoinColumn annotation to implement the relation using a foreign key. Do this, but before you test, delete ALL generated tables in the database
Create a "test" method and insert a number of Customers with Addresses into the tables, using JPA.

Næste der skal gøres tilføje metoder til customer som kan tilføje addresser til customer, og færdig test ved //c1.addAdress()